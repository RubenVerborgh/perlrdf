PerlRDF TODO List
=================

Things that we know we want to address in the future (and who is going to do
the work, if known):

## RDF::Query
	* RDFa support for FROM clauses [kasei]
	* Track SPARQL 1.1 Query [kasei]
		* Aggregates
			* Port aggregate support from SPARQLP parser
			* Implement HAVING clauses
		* Project Expressions
			* Align syntax with draft spec
		* Basic Federated Queries
			* Port SERVICE support from SPARQLP parser
	* Fix nested GRAPH graph patterns (currently disallowed?) [kasei]
	* Implement SPARQL 1.1 Update
	* SPARQL 1.1 Property Paths
## RDF::Trine
	* Parsers
		* Guess parser based on filename/content sniffing
		* XRD [tobyink]
		* TriX [tobyink]
		* GRDDL [tobyink]
		* jsonGRDDL [tobyink]
		* eRDF [tobyink]
		* OpenURL COinS [tobyink]
		* Microformats [tobyink]
		* HTML [tobyink]
		* TriG
		* N-Quads
		* Much faster Turtle parser
		* Add optional support for HTTP::Link::Parser::parse_links_into_model to RDF::Trine::Parser [kasei]
		* Proper URL parsing based on mime types [kasei; done 2009.12.23]
		* RDFa [kasei; done 2009.12.24]
	* Serializers
		* Standardize serializer API and turn it into POD in RDF::Trine::Serializer
		* Pretty print RDF/XML [tobyink or kasei]
		* TriX [tobyink]
		* TriG
		* N-Quads
		* RDFa (refactor from RDF::LinkedData) [kasei]
		* Pretty print Turtle [kasei; done 2009.12.31]
	* Exporters
		* vCard [tobyink]
		* jCard [tobyink]
		* iCal [tobyink]
		* KML [tobyink]
		* M3U [tobyink]
		* Atom [tobyink]
## RDF::Endpoint
	* Clean up and release to CPAN [kasei]
	* Implement SPARQL 1.1 Service Description [kasei]
## RDF::LinkedData
	* Rename to RDF::LinkedData::Handler (or something similar to denote mod_perl) [kasei]
	* Clean up and release to CPAN [kasei]
	* Implement SPARQL 1.1 HTTP RDF Update



NG-branch Work
==============

The ng branch of perlrdf is meant for significant changes to the APIs. This
includes tracking SPARQL 1.1, bringing sanity to things that have never quite
worked right (support for quads), standardizing APIs for all parser and
serializer classes, etc.

## RDF::Query
	* SPARQL 1.1 Query
	* API updates to support full SPARQL 1.1 Service Description (including dataset description)
## RDF::Trine
	* Add full coverage tests of the storage classes to t/store.t.
	* Move nil-valued signleton ::Node object to its own ::Node::Nil class.
	* Merge ::Statement and ::Statement::Quad. Triples will have the nil node in the graph position.
	* Bring sanity to quad handling in the Store apis. Consider having a union default graph.
